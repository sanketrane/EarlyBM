
// Code generated by stanc 4fa29e29
#include <stan/model/model_header.hpp>
namespace multiplex_M1_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 136> locations_array__ = 
{" (found before start of program)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 107, column 2 to column 19)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 108, column 2 to column 33)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 109, column 2 to column 17)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 110, column 2 to column 21)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 111, column 2 to column 24)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 114, column 2 to column 25)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 115, column 2 to column 25)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 120, column 2 to column 26)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 121, column 2 to column 34)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 122, column 2 to column 35)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 125, column 2 to column 16)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 126, column 2 to column 20)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 129, column 2 to column 21)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 130, column 2 to column 21)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 131, column 2 to column 24)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 132, column 2 to column 21)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 133, column 2 to column 21)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 134, column 2 to column 23)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 137, column 2 to column 26)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 138, column 2 to column 28)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 139, column 2 to column 30)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 140, column 2 to column 32)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 141, column 2 to column 19)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 143, column 2 to column 23)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 145, column 2 to column 62)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 149, column 4 to column 162)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 148, column 22 to line 150, column 3)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 148, column 2 to line 150, column 3)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 152, column 4 to column 163)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 151, column 22 to line 153, column 3)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 151, column 2 to line 153, column 3)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 155, column 2 to column 22)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 156, column 2 to column 27)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 157, column 2 to column 23)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 158, column 2 to column 28)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 179, column 3 to column 31)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 181, column 3 to column 30)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 181, column 31 to column 58)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 183, column 3 to column 35)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 183, column 36 to column 69)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 188, column 3 to column 28)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 188, column 29 to column 54)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 191, column 3 to column 29)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 192, column 3 to column 65)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 197, column 5 to column 118)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 198, column 5 to column 93)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 201, column 5 to column 118)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 202, column 5 to column 94)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 195, column 23 to line 204, column 4)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 195, column 3 to line 204, column 4)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 209, column 6 to column 110)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 207, column 25 to line 210, column 5)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 207, column 4 to line 210, column 5)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 215, column 6 to column 112)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 213, column 25 to line 216, column 5)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 213, column 4 to line 216, column 5)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 163, column 2 to column 26)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 164, column 2 to column 28)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 165, column 2 to column 30)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 166, column 2 to column 32)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 167, column 2 to column 23)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 169, column 2 to column 28)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 170, column 2 to column 28)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 173, column 2 to column 83)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 174, column 2 to column 85)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 93, column 2 to column 26)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 94, column 2 to column 26)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 95, column 2 to column 27)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 96, column 2 to column 26)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 97, column 30 to column 37)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 97, column 2 to column 39)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 98, column 30 to column 37)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 98, column 2 to column 39)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 99, column 29 to column 37)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 99, column 2 to column 39)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 100, column 31 to column 38)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 100, column 2 to column 40)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 101, column 32 to column 39)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 101, column 2 to column 41)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 102, column 15 to column 22)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 102, column 2 to column 24)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 120, column 13 to column 21)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 121, column 25 to column 32)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 122, column 26 to column 33)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 179, column 19 to column 26)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 181, column 21 to column 28)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 181, column 49 to column 56)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 183, column 26 to column 33)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 183, column 60 to column 67)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 188, column 10 to column 17)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 188, column 36 to column 43)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 4, column 4 to column 27)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 6, column 4 to column 40)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 7, column 4 to column 17)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 3, column 45 to line 8, column 4)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 13, column 5 to column 25)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 14, column 5 to column 27)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 15, column 5 to column 29)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 16, column 5 to column 31)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 18, column 5 to column 24)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 19, column 5 to column 25)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 21, column 5 to column 71)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 22, column 5 to column 83)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 25, column 5 to column 18)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 27, column 5 to column 130)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 29, column 5 to column 150)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 31, column 5 to column 139)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 34, column 5 to column 142)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 36, column 5 to column 165)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 38, column 5 to column 155)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 54, column 5 to column 17)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 11, column 81 to line 55, column 4)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 59, column 5 to column 35)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 60, column 16 to column 22)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 60, column 5 to column 27)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 61, column 5 to column 88)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 62, column 5 to column 18)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 57, column 76 to line 63, column 4)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 67, column 5 to column 25)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 68, column 17 to column 22)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 68, column 5 to column 24)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 69, column 5 to column 18)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 72, column 7 to column 44)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 71, column 24 to line 73, column 6)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 71, column 5 to line 73, column 6)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 74, column 5 to column 19)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 66, column 34 to line 75, column 4)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 78, column 5 to column 18)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 80, column 5 to column 41)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 81, column 5 to column 19)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 77, column 29 to line 82, column 4)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 85, column 5 to column 18)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 87, column 5 to column 34)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 88, column 5 to column 19)",
 " (in 'EarlyB_BM/stan_models/multiplex_M1.stan', line 84, column 28 to line 89, column 4)"};

struct ODE_sys_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_stan_scalar<T2__>,
                                stan::is_stan_scalar<T3__>>* = nullptr>
  std::vector<stan::promote_args_t<T0__, T1__, T2__, T3__>>
  operator()(const T0__& time, const std::vector<T1__>& y,
             const std::vector<T2__>& parms, const std::vector<T3__>& rdata,
             const std::vector<int>& idata, std::ostream* pstream__) const;
};
struct eps_function_functor__ {
  template <typename T0__, typename T1__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>>* = nullptr>
  stan::promote_args_t<T0__, T1__>
  operator()(const T0__& time, const std::vector<T1__>& params,
             std::ostream* pstream__) const;
};
struct asinsqrt_inv_functor__ {
  template <typename T0__,
            stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
  stan::promote_args_t<T0__>
  operator()(const T0__& x, std::ostream* pstream__) const;
};
struct solve_ODE_sys_functor__ {
  template <typename T0__, typename T1__, typename T2__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_stan_scalar<T2__>>* = nullptr>
  std::vector<std::vector<stan::promote_args_t<T0__, T1__, T2__>>>
  operator()(const std::vector<T0__>& solve_time,
             const std::vector<T1__>& init_cond,
             const std::vector<T2__>& parms, std::ostream* pstream__) const;
};
struct asinsqrt_real_functor__ {
  template <typename T0__,
            stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
  stan::promote_args_t<T0__>
  operator()(const T0__& x, std::ostream* pstream__) const;
};
struct asinsqrt_array_functor__ {
  template <typename T0__,
            stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
  std::vector<stan::promote_args_t<T0__>>
  operator()(const std::vector<T0__>& x, std::ostream* pstream__) const;
};

template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>* = nullptr>
  stan::promote_args_t<T0__, T1__>
  eps_function(const T0__& time, const std::vector<T1__>& params,
               std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ r_eps = DUMMY_VAR__;
      current_statement__ = 92;
      r_eps = stan::model::rvalue(params, "params",
                stan::model::index_uni(5));
      local_scalar_t__ value = DUMMY_VAR__;
      current_statement__ = 93;
      value = (1.0 / (1 + stan::math::pow((time / r_eps), 2)));
      current_statement__ = 94;
      return value;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
  std::vector<stan::promote_args_t<T0__, T1__, T2__, T3__>>
  ODE_sys(const T0__& time, const std::vector<T1__>& y,
          const std::vector<T2__>& parms, const std::vector<T3__>& rdata,
          const std::vector<int>& idata, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ rho = DUMMY_VAR__;
      current_statement__ = 96;
      rho = stan::model::rvalue(parms, "parms", stan::model::index_uni(1));
      local_scalar_t__ delta = DUMMY_VAR__;
      current_statement__ = 97;
      delta = stan::model::rvalue(parms, "parms", stan::model::index_uni(2));
      local_scalar_t__ rho_dko = DUMMY_VAR__;
      current_statement__ = 98;
      rho_dko = stan::model::rvalue(parms, "parms",
                  stan::model::index_uni(3));
      local_scalar_t__ delta_dko = DUMMY_VAR__;
      current_statement__ = 99;
      delta_dko = stan::model::rvalue(parms, "parms",
                    stan::model::index_uni(4));
      local_scalar_t__ x_pos = DUMMY_VAR__;
      current_statement__ = 100;
      x_pos = 131619;
      local_scalar_t__ x_neg = DUMMY_VAR__;
      current_statement__ = 101;
      x_neg = 378491;
      local_scalar_t__ phi = DUMMY_VAR__;
      current_statement__ = 102;
      phi = (((rho - delta) *
               ((stan::model::rvalue(y, "y", stan::model::index_uni(1)) +
                  stan::model::rvalue(y, "y", stan::model::index_uni(2))) +
                 stan::model::rvalue(y, "y", stan::model::index_uni(3)))) /
              (x_pos + x_neg));
      local_scalar_t__ phi_dko = DUMMY_VAR__;
      current_statement__ = 103;
      phi_dko = (((rho_dko - delta_dko) *
                   ((stan::model::rvalue(y, "y", stan::model::index_uni(4)) +
                      stan::model::rvalue(y, "y", stan::model::index_uni(5)))
                     +
                     stan::model::rvalue(y, "y", stan::model::index_uni(6))))
                  / (x_pos + x_neg));
      std::vector<local_scalar_t__> dydt =
         std::vector<local_scalar_t__>(6, DUMMY_VAR__);
      current_statement__ = 105;
      stan::model::assign(dydt,
        ((((rho * eps_function(time, parms, pstream__)) *
            ((2 * stan::model::rvalue(y, "y", stan::model::index_uni(2))) +
              stan::model::rvalue(y, "y", stan::model::index_uni(1)))) -
           ((rho * (1 - eps_function(time, parms, pstream__))) *
             stan::model::rvalue(y, "y", stan::model::index_uni(1)))) -
          (delta * stan::model::rvalue(y, "y", stan::model::index_uni(1)))),
        "assigning variable dydt", stan::model::index_uni(1));
      current_statement__ = 106;
      stan::model::assign(dydt,
        ((((phi * x_pos) +
            ((rho * eps_function(time, parms, pstream__)) *
              ((2 * stan::model::rvalue(y, "y", stan::model::index_uni(3))) -
                stan::model::rvalue(y, "y", stan::model::index_uni(2))))) +
           ((rho * (1 - eps_function(time, parms, pstream__))) *
             (2 * stan::model::rvalue(y, "y", stan::model::index_uni(1))))) -
          (delta * stan::model::rvalue(y, "y", stan::model::index_uni(2)))),
        "assigning variable dydt", stan::model::index_uni(2));
      current_statement__ = 107;
      stan::model::assign(dydt,
        ((((phi * x_neg) -
            ((rho * eps_function(time, parms, pstream__)) *
              stan::model::rvalue(y, "y", stan::model::index_uni(3)))) +
           ((rho * (1 - eps_function(time, parms, pstream__))) *
             (stan::model::rvalue(y, "y", stan::model::index_uni(2)) +
               stan::model::rvalue(y, "y", stan::model::index_uni(3))))) -
          (delta * stan::model::rvalue(y, "y", stan::model::index_uni(3)))),
        "assigning variable dydt", stan::model::index_uni(3));
      current_statement__ = 108;
      stan::model::assign(dydt,
        ((((rho_dko * eps_function(time, parms, pstream__)) *
            ((2 * stan::model::rvalue(y, "y", stan::model::index_uni(5))) +
              stan::model::rvalue(y, "y", stan::model::index_uni(4)))) -
           ((rho_dko * (1 - eps_function(time, parms, pstream__))) *
             stan::model::rvalue(y, "y", stan::model::index_uni(4)))) -
          (delta_dko *
            stan::model::rvalue(y, "y", stan::model::index_uni(4)))),
        "assigning variable dydt", stan::model::index_uni(4));
      current_statement__ = 109;
      stan::model::assign(dydt,
        ((((phi_dko * x_pos) +
            ((rho_dko * eps_function(time, parms, pstream__)) *
              ((2 * stan::model::rvalue(y, "y", stan::model::index_uni(6))) -
                stan::model::rvalue(y, "y", stan::model::index_uni(5))))) +
           ((rho_dko * (1 - eps_function(time, parms, pstream__))) *
             (2 * stan::model::rvalue(y, "y", stan::model::index_uni(4))))) -
          (delta_dko *
            stan::model::rvalue(y, "y", stan::model::index_uni(5)))),
        "assigning variable dydt", stan::model::index_uni(5));
      current_statement__ = 110;
      stan::model::assign(dydt,
        ((((phi_dko * x_neg) -
            ((rho_dko * eps_function(time, parms, pstream__)) *
              stan::model::rvalue(y, "y", stan::model::index_uni(6)))) +
           ((rho_dko * (1 - eps_function(time, parms, pstream__))) *
             (stan::model::rvalue(y, "y", stan::model::index_uni(5)) +
               stan::model::rvalue(y, "y", stan::model::index_uni(6))))) -
          (delta_dko *
            stan::model::rvalue(y, "y", stan::model::index_uni(6)))),
        "assigning variable dydt", stan::model::index_uni(6));
      current_statement__ = 111;
      return dydt;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
  std::vector<std::vector<stan::promote_args_t<T0__, T1__, T2__>>>
  solve_ODE_sys(const std::vector<T0__>& solve_time,
                const std::vector<T1__>& init_cond,
                const std::vector<T2__>& parms, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int numdim = std::numeric_limits<int>::min();
      current_statement__ = 113;
      numdim = stan::math::size(solve_time);
      current_statement__ = 114;
      stan::math::validate_non_negative_index("y_sol", "numdim", numdim);
      std::vector<std::vector<local_scalar_t__>> y_sol =
         std::vector<std::vector<local_scalar_t__>>(numdim, 
           std::vector<local_scalar_t__>(6, DUMMY_VAR__));
      current_statement__ = 116;
      stan::model::assign(y_sol,
        stan::math::integrate_ode_rk45(ODE_sys_functor__(), init_cond, 0.0,
          solve_time, parms, std::vector<double>{0.0}, std::vector<int>{0},
          pstream__), "assigning variable y_sol");
      current_statement__ = 117;
      return y_sol;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
  std::vector<stan::promote_args_t<T0__>>
  asinsqrt_array(const std::vector<T0__>& x, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int ndims = std::numeric_limits<int>::min();
      current_statement__ = 119;
      ndims = stan::math::size(x);
      current_statement__ = 120;
      stan::math::validate_non_negative_index("answer", "ndims", ndims);
      std::vector<local_scalar_t__> answer =
         std::vector<local_scalar_t__>(ndims, DUMMY_VAR__);
      local_scalar_t__ a = DUMMY_VAR__;
      current_statement__ = 122;
      a = 1.2;
      current_statement__ = 125;
      for (int i = 1; i <= ndims; ++i) {
        current_statement__ = 123;
        stan::model::assign(answer,
          stan::math::asin(
            (stan::math::sqrt(
               stan::model::rvalue(x, "x", stan::model::index_uni(i))) /
              stan::math::sqrt(a))),
          "assigning variable answer", stan::model::index_uni(i));
      }
      current_statement__ = 126;
      return answer;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
  stan::promote_args_t<T0__>
  asinsqrt_real(const T0__& x, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ a = DUMMY_VAR__;
      current_statement__ = 128;
      a = 1.2;
      local_scalar_t__ answer = DUMMY_VAR__;
      current_statement__ = 129;
      answer = stan::math::asin((stan::math::sqrt(x) / stan::math::sqrt(a)));
      current_statement__ = 130;
      return answer;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
  stan::promote_args_t<T0__>
  asinsqrt_inv(const T0__& x, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ a = DUMMY_VAR__;
      current_statement__ = 132;
      a = 1.2;
      local_scalar_t__ answer = DUMMY_VAR__;
      current_statement__ = 133;
      answer = (a * stan::math::pow(stan::math::sin(x), 2));
      current_statement__ = 134;
      return answer;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
std::vector<stan::promote_args_t<T0__, T1__, T2__, T3__>>
ODE_sys_functor__::operator()(const T0__& time, const std::vector<T1__>& y,
                              const std::vector<T2__>& parms,
                              const std::vector<T3__>& rdata,
                              const std::vector<int>& idata,
                              std::ostream* pstream__)  const
{
  return ODE_sys(time, y, parms, rdata, idata, pstream__);
}

template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>*>
stan::promote_args_t<T0__, T1__>
eps_function_functor__::operator()(const T0__& time,
                                   const std::vector<T1__>& params,
                                   std::ostream* pstream__)  const
{
  return eps_function(time, params, pstream__);
}

template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
stan::promote_args_t<T0__>
asinsqrt_inv_functor__::operator()(const T0__& x, std::ostream* pstream__) 
const
{
  return asinsqrt_inv(x, pstream__);
}

template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
std::vector<std::vector<stan::promote_args_t<T0__, T1__, T2__>>>
solve_ODE_sys_functor__::operator()(const std::vector<T0__>& solve_time,
                                    const std::vector<T1__>& init_cond,
                                    const std::vector<T2__>& parms,
                                    std::ostream* pstream__)  const
{
  return solve_ODE_sys(solve_time, init_cond, parms, pstream__);
}

template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
stan::promote_args_t<T0__>
asinsqrt_real_functor__::operator()(const T0__& x, std::ostream* pstream__) 
const
{
  return asinsqrt_real(x, pstream__);
}

template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
std::vector<stan::promote_args_t<T0__>>
asinsqrt_array_functor__::operator()(const std::vector<T0__>& x,
                                     std::ostream* pstream__)  const
{
  return asinsqrt_array(x, pstream__);
}


class multiplex_M1_model final : public model_base_crtp<multiplex_M1_model> {

 private:
  int numObs1;
  int numObs2;
  int n_shards;
  int numPred;
  std::vector<int> time_index1;
  std::vector<int> time_index2;
  std::vector<double> solve_time;
  std::vector<double> largePreB_wt;
  std::vector<double> largePreB_dko;
  std::vector<double> ts_pred; 
  
 
 public:
  ~multiplex_M1_model() { }
  
  inline std::string model_name() const final { return "multiplex_M1_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 4fa29e29", "stancflags = "};
  }
  
  
  multiplex_M1_model(stan::io::var_context& context__,
                     unsigned int random_seed__ = 0,
                     std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "multiplex_M1_model_namespace::multiplex_M1_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 66;
      context__.validate_dims("data initialization","numObs1","int",
           std::vector<size_t>{});
      numObs1 = std::numeric_limits<int>::min();
      
      
      current_statement__ = 66;
      numObs1 = context__.vals_i("numObs1")[(1 - 1)];
      current_statement__ = 66;
      stan::math::check_greater_or_equal(function__, "numObs1", numObs1, 1);
      current_statement__ = 67;
      context__.validate_dims("data initialization","numObs2","int",
           std::vector<size_t>{});
      numObs2 = std::numeric_limits<int>::min();
      
      
      current_statement__ = 67;
      numObs2 = context__.vals_i("numObs2")[(1 - 1)];
      current_statement__ = 67;
      stan::math::check_greater_or_equal(function__, "numObs2", numObs2, 1);
      current_statement__ = 68;
      context__.validate_dims("data initialization","n_shards","int",
           std::vector<size_t>{});
      n_shards = std::numeric_limits<int>::min();
      
      
      current_statement__ = 68;
      n_shards = context__.vals_i("n_shards")[(1 - 1)];
      current_statement__ = 68;
      stan::math::check_greater_or_equal(function__, "n_shards", n_shards, 1);
      current_statement__ = 69;
      context__.validate_dims("data initialization","numPred","int",
           std::vector<size_t>{});
      numPred = std::numeric_limits<int>::min();
      
      
      current_statement__ = 69;
      numPred = context__.vals_i("numPred")[(1 - 1)];
      current_statement__ = 69;
      stan::math::check_greater_or_equal(function__, "numPred", numPred, 1);
      current_statement__ = 70;
      stan::math::validate_non_negative_index("time_index1", "numObs1",
                                              numObs1);
      current_statement__ = 71;
      context__.validate_dims("data initialization","time_index1","int",
           std::vector<size_t>{static_cast<size_t>(numObs1)});
      time_index1 = 
        std::vector<int>(numObs1, std::numeric_limits<int>::min());
      
      
      current_statement__ = 71;
      time_index1 = context__.vals_i("time_index1");
      current_statement__ = 71;
      stan::math::check_greater_or_equal(function__, "time_index1",
                                            time_index1, 1);
      current_statement__ = 72;
      stan::math::validate_non_negative_index("time_index2", "numObs2",
                                              numObs2);
      current_statement__ = 73;
      context__.validate_dims("data initialization","time_index2","int",
           std::vector<size_t>{static_cast<size_t>(numObs2)});
      time_index2 = 
        std::vector<int>(numObs2, std::numeric_limits<int>::min());
      
      
      current_statement__ = 73;
      time_index2 = context__.vals_i("time_index2");
      current_statement__ = 73;
      stan::math::check_greater_or_equal(function__, "time_index2",
                                            time_index2, 1);
      current_statement__ = 74;
      stan::math::validate_non_negative_index("solve_time", "n_shards",
                                              n_shards);
      current_statement__ = 75;
      context__.validate_dims("data initialization","solve_time","double",
           std::vector<size_t>{static_cast<size_t>(n_shards)});
      solve_time = 
        std::vector<double>(n_shards, 
          std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 75;
      solve_time = context__.vals_r("solve_time");
      current_statement__ = 75;
      stan::math::check_greater_or_equal(function__, "solve_time",
                                            solve_time, 0);
      current_statement__ = 76;
      stan::math::validate_non_negative_index("largePreB_wt", "numObs1",
                                              numObs1);
      current_statement__ = 77;
      context__.validate_dims("data initialization","largePreB_wt","double",
           std::vector<size_t>{static_cast<size_t>(numObs1)});
      largePreB_wt = 
        std::vector<double>(numObs1, 
          std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 77;
      largePreB_wt = context__.vals_r("largePreB_wt");
      current_statement__ = 77;
      stan::math::check_greater_or_equal(function__, "largePreB_wt",
                                            largePreB_wt, 0);
      current_statement__ = 78;
      stan::math::validate_non_negative_index("largePreB_dko", "numObs2",
                                              numObs2);
      current_statement__ = 79;
      context__.validate_dims("data initialization","largePreB_dko","double",
           std::vector<size_t>{static_cast<size_t>(numObs2)});
      largePreB_dko = 
        std::vector<double>(numObs2, 
          std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 79;
      largePreB_dko = context__.vals_r("largePreB_dko");
      current_statement__ = 79;
      stan::math::check_greater_or_equal(function__, "largePreB_dko",
                                            largePreB_dko, 0);
      current_statement__ = 80;
      stan::math::validate_non_negative_index("ts_pred", "numPred", numPred);
      current_statement__ = 81;
      context__.validate_dims("data initialization","ts_pred","double",
           std::vector<size_t>{static_cast<size_t>(numPred)});
      ts_pred = 
        std::vector<double>(numPred, 
          std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 81;
      ts_pred = context__.vals_r("ts_pred");
      current_statement__ = 82;
      stan::math::validate_non_negative_index("y_hat", "n_shards", n_shards);
      current_statement__ = 83;
      stan::math::validate_non_negative_index("largePreB_wt_mean", "numObs1",
                                              numObs1);
      current_statement__ = 84;
      stan::math::validate_non_negative_index("largePreB_dko_mean",
                                              "numObs2", numObs2);
      current_statement__ = 85;
      stan::math::validate_non_negative_index("y_hat_pred", "numPred",
                                              numPred);
      current_statement__ = 86;
      stan::math::validate_non_negative_index("y1_mean_pred", "numPred",
                                              numPred);
      current_statement__ = 87;
      stan::math::validate_non_negative_index("y2_mean_pred", "numPred",
                                              numPred);
      current_statement__ = 88;
      stan::math::validate_non_negative_index("largePreB_wt_pred", "numPred",
                                              numPred);
      current_statement__ = 89;
      stan::math::validate_non_negative_index("largePreB_dko_pred",
                                              "numPred", numPred);
      current_statement__ = 90;
      stan::math::validate_non_negative_index("log_lik1", "numObs1", numObs1);
      current_statement__ = 91;
      stan::math::validate_non_negative_index("log_lik2", "numObs2", numObs2);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "multiplex_M1_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ rho_dko_Log = DUMMY_VAR__;
      current_statement__ = 1;
      rho_dko_Log = in__.template read<local_scalar_t__>();
      local_scalar_t__ rho_Log = DUMMY_VAR__;
      current_statement__ = 2;
      rho_Log = in__.template read_constrain_lb<local_scalar_t__, 
                  jacobian__>(rho_dko_Log, lp__);
      local_scalar_t__ delta_Log = DUMMY_VAR__;
      current_statement__ = 3;
      delta_Log = in__.template read<local_scalar_t__>();
      local_scalar_t__ delta_dko_Log = DUMMY_VAR__;
      current_statement__ = 4;
      delta_dko_Log = in__.template read<local_scalar_t__>();
      local_scalar_t__ r_eps = DUMMY_VAR__;
      current_statement__ = 5;
      r_eps = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      local_scalar_t__ sigma1 = DUMMY_VAR__;
      current_statement__ = 6;
      sigma1 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      local_scalar_t__ sigma2 = DUMMY_VAR__;
      current_statement__ = 7;
      sigma2 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      std::vector<std::vector<local_scalar_t__>> y_hat =
         std::vector<std::vector<local_scalar_t__>>(n_shards, 
           std::vector<local_scalar_t__>(6, DUMMY_VAR__));
      std::vector<local_scalar_t__> largePreB_wt_mean =
         std::vector<local_scalar_t__>(numObs1, DUMMY_VAR__);
      std::vector<local_scalar_t__> largePreB_dko_mean =
         std::vector<local_scalar_t__>(numObs2, DUMMY_VAR__);
      std::vector<local_scalar_t__> parms =
         std::vector<local_scalar_t__>(5, DUMMY_VAR__);
      std::vector<local_scalar_t__> init_cond =
         std::vector<local_scalar_t__>(6, DUMMY_VAR__);
      current_statement__ = 13;
      stan::model::assign(init_cond, 0.0,
        "assigning variable init_cond", stan::model::index_uni(1));
      current_statement__ = 14;
      stan::model::assign(init_cond, 0.0,
        "assigning variable init_cond", stan::model::index_uni(2));
      current_statement__ = 15;
      stan::model::assign(init_cond, 372151,
        "assigning variable init_cond", stan::model::index_uni(3));
      current_statement__ = 16;
      stan::model::assign(init_cond, 0.0,
        "assigning variable init_cond", stan::model::index_uni(4));
      current_statement__ = 17;
      stan::model::assign(init_cond, 0.0,
        "assigning variable init_cond", stan::model::index_uni(5));
      current_statement__ = 18;
      stan::model::assign(init_cond, 83027,
        "assigning variable init_cond", stan::model::index_uni(6));
      current_statement__ = 19;
      stan::model::assign(parms, stan::math::exp(rho_Log),
        "assigning variable parms", stan::model::index_uni(1));
      current_statement__ = 20;
      stan::model::assign(parms, stan::math::exp(delta_Log),
        "assigning variable parms", stan::model::index_uni(2));
      current_statement__ = 21;
      stan::model::assign(parms, stan::math::exp(rho_dko_Log),
        "assigning variable parms", stan::model::index_uni(3));
      current_statement__ = 22;
      stan::model::assign(parms, stan::math::exp(delta_dko_Log),
        "assigning variable parms", stan::model::index_uni(4));
      current_statement__ = 23;
      stan::model::assign(parms, r_eps,
        "assigning variable parms", stan::model::index_uni(5));
      current_statement__ = 24;
      stan::model::assign(y_hat, init_cond,
        "assigning variable y_hat", stan::model::index_uni(1));
      current_statement__ = 25;
      stan::model::assign(y_hat,
        solve_ODE_sys(
          stan::model::rvalue(solve_time, "solve_time",
            stan::model::index_min(2)), init_cond, parms, pstream__),
        "assigning variable y_hat", stan::model::index_min(2));
      current_statement__ = 28;
      for (int i = 1; i <= numObs1; ++i) {
        current_statement__ = 26;
        stan::model::assign(largePreB_wt_mean,
          ((stan::model::rvalue(y_hat, "y_hat",
              stan::model::index_uni(stan::model::rvalue(time_index1,
                                       "time_index1",
                                       stan::model::index_uni(i))),
                stan::model::index_uni(1)) +
             stan::model::rvalue(y_hat, "y_hat",
               stan::model::index_uni(stan::model::rvalue(time_index1,
                                        "time_index1",
                                        stan::model::index_uni(i))),
                 stan::model::index_uni(2))) /
            ((stan::model::rvalue(y_hat, "y_hat",
                stan::model::index_uni(stan::model::rvalue(time_index1,
                                         "time_index1",
                                         stan::model::index_uni(i))),
                  stan::model::index_uni(1)) +
               stan::model::rvalue(y_hat, "y_hat",
                 stan::model::index_uni(stan::model::rvalue(time_index1,
                                          "time_index1",
                                          stan::model::index_uni(i))),
                   stan::model::index_uni(2))) +
              stan::model::rvalue(y_hat, "y_hat",
                stan::model::index_uni(stan::model::rvalue(time_index1,
                                         "time_index1",
                                         stan::model::index_uni(i))),
                  stan::model::index_uni(3)))),
          "assigning variable largePreB_wt_mean", stan::model::index_uni(i));
      }
      current_statement__ = 31;
      for (int i = 1; i <= numObs2; ++i) {
        current_statement__ = 29;
        stan::model::assign(largePreB_dko_mean,
          ((stan::model::rvalue(y_hat, "y_hat",
              stan::model::index_uni(stan::model::rvalue(time_index2,
                                       "time_index2",
                                       stan::model::index_uni(i))),
                stan::model::index_uni(4)) +
             stan::model::rvalue(y_hat, "y_hat",
               stan::model::index_uni(stan::model::rvalue(time_index2,
                                        "time_index2",
                                        stan::model::index_uni(i))),
                 stan::model::index_uni(5))) /
            ((stan::model::rvalue(y_hat, "y_hat",
                stan::model::index_uni(stan::model::rvalue(time_index2,
                                         "time_index2",
                                         stan::model::index_uni(i))),
                  stan::model::index_uni(4)) +
               stan::model::rvalue(y_hat, "y_hat",
                 stan::model::index_uni(stan::model::rvalue(time_index2,
                                          "time_index2",
                                          stan::model::index_uni(i))),
                   stan::model::index_uni(5))) +
              stan::model::rvalue(y_hat, "y_hat",
                stan::model::index_uni(stan::model::rvalue(time_index2,
                                         "time_index2",
                                         stan::model::index_uni(i))),
                  stan::model::index_uni(6)))),
          "assigning variable largePreB_dko_mean", stan::model::index_uni(i));
      }
      current_statement__ = 32;
      if (pstream__) {
        stan::math::stan_print(pstream__, largePreB_wt);
        stan::math::stan_print(pstream__, "\n");
      }
      current_statement__ = 33;
      if (pstream__) {
        stan::math::stan_print(pstream__, largePreB_wt_mean);
        stan::math::stan_print(pstream__, "\n");
      }
      current_statement__ = 34;
      if (pstream__) {
        stan::math::stan_print(pstream__, largePreB_dko);
        stan::math::stan_print(pstream__, "\n");
      }
      current_statement__ = 35;
      if (pstream__) {
        stan::math::stan_print(pstream__, largePreB_dko_mean);
        stan::math::stan_print(pstream__, "\n");
      }
      {
        current_statement__ = 57;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(rho_Log, -4, 1));
        current_statement__ = 58;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(delta_Log, -4, 1));
        current_statement__ = 59;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(rho_dko_Log, -4, 1));
        current_statement__ = 60;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(delta_dko_Log, -4, 1));
        current_statement__ = 61;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(r_eps, 5, 2));
        current_statement__ = 62;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma1, 0.1, 0.5));
        current_statement__ = 63;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma2, 0.2, 0.5));
        current_statement__ = 64;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            asinsqrt_array(largePreB_wt, pstream__),
            asinsqrt_array(largePreB_wt_mean, pstream__), sigma1));
        current_statement__ = 65;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            asinsqrt_array(largePreB_dko, pstream__),
            asinsqrt_array(largePreB_dko_mean, pstream__), sigma2));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "multiplex_M1_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double rho_dko_Log = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      rho_dko_Log = in__.template read<local_scalar_t__>();
      double rho_Log = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      rho_Log = in__.template read_constrain_lb<local_scalar_t__, 
                  jacobian__>(rho_dko_Log, lp__);
      double delta_Log = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      delta_Log = in__.template read<local_scalar_t__>();
      double delta_dko_Log = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      delta_dko_Log = in__.template read<local_scalar_t__>();
      double r_eps = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      r_eps = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      double sigma1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      sigma1 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      double sigma2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      sigma2 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      std::vector<std::vector<double>> y_hat =
         std::vector<std::vector<double>>(n_shards, 
           std::vector<double>(6, std::numeric_limits<double>::quiet_NaN()));
      std::vector<double> largePreB_wt_mean =
         std::vector<double>(numObs1, 
           std::numeric_limits<double>::quiet_NaN());
      std::vector<double> largePreB_dko_mean =
         std::vector<double>(numObs2, 
           std::numeric_limits<double>::quiet_NaN());
      std::vector<double> parms =
         std::vector<double>(5, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> init_cond =
         std::vector<double>(6, std::numeric_limits<double>::quiet_NaN());
      out__.write(rho_dko_Log);
      out__.write(rho_Log);
      out__.write(delta_Log);
      out__.write(delta_dko_Log);
      out__.write(r_eps);
      out__.write(sigma1);
      out__.write(sigma2);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 13;
      stan::model::assign(init_cond, 0.0,
        "assigning variable init_cond", stan::model::index_uni(1));
      current_statement__ = 14;
      stan::model::assign(init_cond, 0.0,
        "assigning variable init_cond", stan::model::index_uni(2));
      current_statement__ = 15;
      stan::model::assign(init_cond, 372151,
        "assigning variable init_cond", stan::model::index_uni(3));
      current_statement__ = 16;
      stan::model::assign(init_cond, 0.0,
        "assigning variable init_cond", stan::model::index_uni(4));
      current_statement__ = 17;
      stan::model::assign(init_cond, 0.0,
        "assigning variable init_cond", stan::model::index_uni(5));
      current_statement__ = 18;
      stan::model::assign(init_cond, 83027,
        "assigning variable init_cond", stan::model::index_uni(6));
      current_statement__ = 19;
      stan::model::assign(parms, stan::math::exp(rho_Log),
        "assigning variable parms", stan::model::index_uni(1));
      current_statement__ = 20;
      stan::model::assign(parms, stan::math::exp(delta_Log),
        "assigning variable parms", stan::model::index_uni(2));
      current_statement__ = 21;
      stan::model::assign(parms, stan::math::exp(rho_dko_Log),
        "assigning variable parms", stan::model::index_uni(3));
      current_statement__ = 22;
      stan::model::assign(parms, stan::math::exp(delta_dko_Log),
        "assigning variable parms", stan::model::index_uni(4));
      current_statement__ = 23;
      stan::model::assign(parms, r_eps,
        "assigning variable parms", stan::model::index_uni(5));
      current_statement__ = 24;
      stan::model::assign(y_hat, init_cond,
        "assigning variable y_hat", stan::model::index_uni(1));
      current_statement__ = 25;
      stan::model::assign(y_hat,
        solve_ODE_sys(
          stan::model::rvalue(solve_time, "solve_time",
            stan::model::index_min(2)), init_cond, parms, pstream__),
        "assigning variable y_hat", stan::model::index_min(2));
      current_statement__ = 28;
      for (int i = 1; i <= numObs1; ++i) {
        current_statement__ = 26;
        stan::model::assign(largePreB_wt_mean,
          ((stan::model::rvalue(y_hat, "y_hat",
              stan::model::index_uni(stan::model::rvalue(time_index1,
                                       "time_index1",
                                       stan::model::index_uni(i))),
                stan::model::index_uni(1)) +
             stan::model::rvalue(y_hat, "y_hat",
               stan::model::index_uni(stan::model::rvalue(time_index1,
                                        "time_index1",
                                        stan::model::index_uni(i))),
                 stan::model::index_uni(2))) /
            ((stan::model::rvalue(y_hat, "y_hat",
                stan::model::index_uni(stan::model::rvalue(time_index1,
                                         "time_index1",
                                         stan::model::index_uni(i))),
                  stan::model::index_uni(1)) +
               stan::model::rvalue(y_hat, "y_hat",
                 stan::model::index_uni(stan::model::rvalue(time_index1,
                                          "time_index1",
                                          stan::model::index_uni(i))),
                   stan::model::index_uni(2))) +
              stan::model::rvalue(y_hat, "y_hat",
                stan::model::index_uni(stan::model::rvalue(time_index1,
                                         "time_index1",
                                         stan::model::index_uni(i))),
                  stan::model::index_uni(3)))),
          "assigning variable largePreB_wt_mean", stan::model::index_uni(i));
      }
      current_statement__ = 31;
      for (int i = 1; i <= numObs2; ++i) {
        current_statement__ = 29;
        stan::model::assign(largePreB_dko_mean,
          ((stan::model::rvalue(y_hat, "y_hat",
              stan::model::index_uni(stan::model::rvalue(time_index2,
                                       "time_index2",
                                       stan::model::index_uni(i))),
                stan::model::index_uni(4)) +
             stan::model::rvalue(y_hat, "y_hat",
               stan::model::index_uni(stan::model::rvalue(time_index2,
                                        "time_index2",
                                        stan::model::index_uni(i))),
                 stan::model::index_uni(5))) /
            ((stan::model::rvalue(y_hat, "y_hat",
                stan::model::index_uni(stan::model::rvalue(time_index2,
                                         "time_index2",
                                         stan::model::index_uni(i))),
                  stan::model::index_uni(4)) +
               stan::model::rvalue(y_hat, "y_hat",
                 stan::model::index_uni(stan::model::rvalue(time_index2,
                                          "time_index2",
                                          stan::model::index_uni(i))),
                   stan::model::index_uni(5))) +
              stan::model::rvalue(y_hat, "y_hat",
                stan::model::index_uni(stan::model::rvalue(time_index2,
                                         "time_index2",
                                         stan::model::index_uni(i))),
                  stan::model::index_uni(6)))),
          "assigning variable largePreB_dko_mean", stan::model::index_uni(i));
      }
      current_statement__ = 32;
      if (pstream__) {
        stan::math::stan_print(pstream__, largePreB_wt);
        stan::math::stan_print(pstream__, "\n");
      }
      current_statement__ = 33;
      if (pstream__) {
        stan::math::stan_print(pstream__, largePreB_wt_mean);
        stan::math::stan_print(pstream__, "\n");
      }
      current_statement__ = 34;
      if (pstream__) {
        stan::math::stan_print(pstream__, largePreB_dko);
        stan::math::stan_print(pstream__, "\n");
      }
      current_statement__ = 35;
      if (pstream__) {
        stan::math::stan_print(pstream__, largePreB_dko_mean);
        stan::math::stan_print(pstream__, "\n");
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n_shards; ++sym2__) {
            out__.write(y_hat[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        out__.write(largePreB_wt_mean);
        out__.write(largePreB_dko_mean);
        out__.write(parms);
        out__.write(init_cond);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<std::vector<double>> y_hat_pred =
         std::vector<std::vector<double>>(numPred, 
           std::vector<double>(6, std::numeric_limits<double>::quiet_NaN()));
      std::vector<double> y1_mean_pred =
         std::vector<double>(numPred, 
           std::numeric_limits<double>::quiet_NaN());
      std::vector<double> y2_mean_pred =
         std::vector<double>(numPred, 
           std::numeric_limits<double>::quiet_NaN());
      std::vector<double> largePreB_wt_pred =
         std::vector<double>(numPred, 
           std::numeric_limits<double>::quiet_NaN());
      std::vector<double> largePreB_dko_pred =
         std::vector<double>(numPred, 
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> log_lik1 =
         Eigen::Matrix<double, -1, 1>::Constant(numObs1,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> log_lik2 =
         Eigen::Matrix<double, -1, 1>::Constant(numObs2,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 43;
      stan::model::assign(y_hat_pred, init_cond,
        "assigning variable y_hat_pred", stan::model::index_uni(1));
      current_statement__ = 44;
      stan::model::assign(y_hat_pred,
        solve_ODE_sys(
          stan::model::rvalue(ts_pred, "ts_pred", stan::model::index_min(2)),
          init_cond, parms, pstream__),
        "assigning variable y_hat_pred", stan::model::index_min(2));
      current_statement__ = 50;
      for (int i = 1; i <= numPred; ++i) {
        current_statement__ = 45;
        stan::model::assign(y1_mean_pred,
          ((stan::model::rvalue(y_hat_pred, "y_hat_pred",
              stan::model::index_uni(i), stan::model::index_uni(1)) +
             stan::model::rvalue(y_hat_pred, "y_hat_pred",
               stan::model::index_uni(i), stan::model::index_uni(2))) /
            ((stan::model::rvalue(y_hat_pred, "y_hat_pred",
                stan::model::index_uni(i), stan::model::index_uni(1)) +
               stan::model::rvalue(y_hat_pred, "y_hat_pred",
                 stan::model::index_uni(i), stan::model::index_uni(2))) +
              stan::model::rvalue(y_hat_pred, "y_hat_pred",
                stan::model::index_uni(i), stan::model::index_uni(3)))),
          "assigning variable y1_mean_pred", stan::model::index_uni(i));
        current_statement__ = 46;
        stan::model::assign(largePreB_wt_pred,
          asinsqrt_inv(
            stan::math::normal_rng(
              asinsqrt_real(
                stan::model::rvalue(y1_mean_pred, "y1_mean_pred",
                  stan::model::index_uni(i)), pstream__), sigma1, base_rng__), pstream__),
          "assigning variable largePreB_wt_pred", stan::model::index_uni(i));
        current_statement__ = 47;
        stan::model::assign(y2_mean_pred,
          ((stan::model::rvalue(y_hat_pred, "y_hat_pred",
              stan::model::index_uni(i), stan::model::index_uni(4)) +
             stan::model::rvalue(y_hat_pred, "y_hat_pred",
               stan::model::index_uni(i), stan::model::index_uni(5))) /
            ((stan::model::rvalue(y_hat_pred, "y_hat_pred",
                stan::model::index_uni(i), stan::model::index_uni(4)) +
               stan::model::rvalue(y_hat_pred, "y_hat_pred",
                 stan::model::index_uni(i), stan::model::index_uni(5))) +
              stan::model::rvalue(y_hat_pred, "y_hat_pred",
                stan::model::index_uni(i), stan::model::index_uni(6)))),
          "assigning variable y2_mean_pred", stan::model::index_uni(i));
        current_statement__ = 48;
        stan::model::assign(largePreB_dko_pred,
          asinsqrt_inv(
            stan::math::normal_rng(
              asinsqrt_real(
                stan::model::rvalue(y2_mean_pred, "y2_mean_pred",
                  stan::model::index_uni(i)), pstream__), sigma2, base_rng__), pstream__),
          "assigning variable largePreB_dko_pred", stan::model::index_uni(i));
      }
      current_statement__ = 53;
      for (int n = 1; n <= numObs1; ++n) {
        current_statement__ = 51;
        stan::model::assign(log_lik1,
          stan::math::normal_lpdf<false>(
            asinsqrt_real(
              stan::model::rvalue(largePreB_wt, "largePreB_wt",
                stan::model::index_uni(n)), pstream__),
            asinsqrt_real(
              stan::model::rvalue(largePreB_wt_mean, "largePreB_wt_mean",
                stan::model::index_uni(n)), pstream__), sigma1),
          "assigning variable log_lik1", stan::model::index_uni(n));
      }
      current_statement__ = 56;
      for (int n = 1; n <= numObs2; ++n) {
        current_statement__ = 54;
        stan::model::assign(log_lik2,
          stan::math::normal_lpdf<false>(
            asinsqrt_real(
              stan::model::rvalue(largePreB_dko, "largePreB_dko",
                stan::model::index_uni(n)), pstream__),
            asinsqrt_real(
              stan::model::rvalue(largePreB_dko_mean, "largePreB_dko_mean",
                stan::model::index_uni(n)), pstream__), sigma2),
          "assigning variable log_lik2", stan::model::index_uni(n));
      }
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
          out__.write(y_hat_pred[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(y1_mean_pred);
      out__.write(y2_mean_pred);
      out__.write(largePreB_wt_pred);
      out__.write(largePreB_dko_pred);
      out__.write(log_lik1);
      out__.write(log_lik2);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ rho_dko_Log = DUMMY_VAR__;
      rho_dko_Log = in__.read<local_scalar_t__>();
      out__.write(rho_dko_Log);
      local_scalar_t__ rho_Log = DUMMY_VAR__;
      rho_Log = in__.read<local_scalar_t__>();
      out__.write_free_lb(rho_dko_Log, rho_Log);
      local_scalar_t__ delta_Log = DUMMY_VAR__;
      delta_Log = in__.read<local_scalar_t__>();
      out__.write(delta_Log);
      local_scalar_t__ delta_dko_Log = DUMMY_VAR__;
      delta_dko_Log = in__.read<local_scalar_t__>();
      out__.write(delta_dko_Log);
      local_scalar_t__ r_eps = DUMMY_VAR__;
      r_eps = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, r_eps);
      local_scalar_t__ sigma1 = DUMMY_VAR__;
      sigma1 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma1);
      local_scalar_t__ sigma2 = DUMMY_VAR__;
      sigma2 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma2);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"rho_dko_Log", "rho_Log", "delta_Log",
      "delta_dko_Log", "r_eps", "sigma1", "sigma2", "y_hat",
      "largePreB_wt_mean", "largePreB_dko_mean", "parms", "init_cond",
      "y_hat_pred", "y1_mean_pred", "y2_mean_pred", "largePreB_wt_pred",
      "largePreB_dko_pred", "log_lik1", "log_lik2"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      },
      std::vector<size_t>{static_cast<size_t>(n_shards),
                          static_cast<size_t>(6)},
      std::vector<size_t>{static_cast<size_t>(numObs1)},
      std::vector<size_t>{static_cast<size_t>(numObs2)},
      std::vector<size_t>{static_cast<size_t>(5)},
      std::vector<size_t>{static_cast<size_t>(6)},
      std::vector<size_t>{static_cast<size_t>(numPred),
                          static_cast<size_t>(6)},
      std::vector<size_t>{static_cast<size_t>(numPred)},
      std::vector<size_t>{static_cast<size_t>(numPred)},
      std::vector<size_t>{static_cast<size_t>(numPred)},
      std::vector<size_t>{static_cast<size_t>(numPred)},
      std::vector<size_t>{static_cast<size_t>(numObs1)},
      std::vector<size_t>{static_cast<size_t>(numObs2)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "rho_dko_Log");
    param_names__.emplace_back(std::string() + "rho_Log");
    param_names__.emplace_back(std::string() + "delta_Log");
    param_names__.emplace_back(std::string() + "delta_dko_Log");
    param_names__.emplace_back(std::string() + "r_eps");
    param_names__.emplace_back(std::string() + "sigma1");
    param_names__.emplace_back(std::string() + "sigma2");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_shards; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_hat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= numObs1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "largePreB_wt_mean" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numObs2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "largePreB_dko_mean" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "parms" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "init_cond" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_hat_pred" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y1_mean_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y2_mean_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "largePreB_wt_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "largePreB_dko_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numObs1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik1" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numObs2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik2" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "rho_dko_Log");
    param_names__.emplace_back(std::string() + "rho_Log");
    param_names__.emplace_back(std::string() + "delta_Log");
    param_names__.emplace_back(std::string() + "delta_dko_Log");
    param_names__.emplace_back(std::string() + "r_eps");
    param_names__.emplace_back(std::string() + "sigma1");
    param_names__.emplace_back(std::string() + "sigma2");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_shards; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_hat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= numObs1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "largePreB_wt_mean" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numObs2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "largePreB_dko_mean" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "parms" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "init_cond" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_hat_pred" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y1_mean_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y2_mean_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "largePreB_wt_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "largePreB_dko_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numObs1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik1" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numObs2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik2" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"rho_dko_Log\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho_Log\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delta_Log\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delta_dko_Log\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"r_eps\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_hat\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_shards) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(6) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"largePreB_wt_mean\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numObs1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"largePreB_dko_mean\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numObs2) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"parms\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(5) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"init_cond\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(6) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"y_hat_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(6) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y1_mean_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y2_mean_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"largePreB_wt_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"largePreB_dko_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(numObs1) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(numObs2) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"rho_dko_Log\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho_Log\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delta_Log\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delta_dko_Log\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"r_eps\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_hat\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_shards) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(6) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"largePreB_wt_mean\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numObs1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"largePreB_dko_mean\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numObs2) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"parms\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(5) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"init_cond\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(6) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"y_hat_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(6) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y1_mean_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y2_mean_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"largePreB_wt_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"largePreB_dko_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(numObs1) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(numObs2) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((1 + 1) + 1) + 1) + 1) + 1) + 1);
      const size_t num_transformed = emit_transformed_parameters * 
  (((((n_shards * 6) + numObs1) + numObs2) + 5) + 6);
      const size_t num_gen_quantities = emit_generated_quantities * 
  (((((((numPred * 6) + numPred) + numPred) + numPred) + numPred) + numObs1)
    + numObs2);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((1 + 1) + 1) + 1) + 1) + 1) + 1);
      const size_t num_transformed = emit_transformed_parameters * 
  (((((n_shards * 6) + numObs1) + numObs2) + 5) + 6);
      const size_t num_gen_quantities = emit_generated_quantities * 
  (((((((numPred * 6) + numPred) + numPred) + numPred) + numPred) + numObs1)
    + numObs2);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 7> names__{"rho_dko_Log", "rho_Log",
      "delta_Log", "delta_dko_Log", "r_eps", "sigma1", "sigma2"};
      const std::array<Eigen::Index, 7> constrain_param_sizes__{1, 1, 
       1, 1, 1, 1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } 
using stan_model = multiplex_M1_model_namespace::multiplex_M1_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return multiplex_M1_model_namespace::profiles__;
}

#endif


