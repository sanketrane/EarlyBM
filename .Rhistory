delta  <- param[2]
theta  <- param[3]
rho_dko <- param[4]
k <- length(param)        #number of unknown parameters
n1 <-  nrow(boot_data1)
n2 <-  nrow(boot_data2)
pred_df <- data.frame(ode(y=init_cond, times=c(0, 4, 18, 30), func=ode_func, parms=param))%>%
mutate(wt_Total = y1+y2+y3,
wt_prop_brdu = (y1+y2)/wt_Total,
dko_Total = y4+y5+y6,
dko_prop_brdu = (y4+y5)/dko_Total) %>%
filter(time != 0) %>% rename(Time_h = time)
pred_wt <- pred_df %>%
select(Time_h, contains('wt'))
pred_dko <- pred_df %>%
select(Time_h, contains('dko'))
wt_total <-  boot_data1$Total
wt_frac <-  boot_data1$prop_brdu
dko_total <-  boot_data2$Total
dko_frac <-  boot_data2$prop_brdu
R1 <- sum((asin_transf(pred_wt$wt_prop_brdu[time_index1]) - asin_transf(wt_frac))^2)
#R2 <- sum((log(pred_wt$wt_Total[time_index1]) - log(wt_total))^2)
R3 <- sum((asin_transf(pred_dko$dko_prop_brdu[time_index2]) - asin_transf(dko_frac))^2)
#R4 <- sum((log(pred_dko$dko_Total[time_index2]) - log(dko_total))^2)
logl <- -(n1/2)*(log(R1))  -(n2/2)*(log(R3))
return(-logl)
}
fit_LL <- optim(par=params, fn=LL_func,
boot_data1 = large_preB_wt, boot_data2 = large_preB_dko,
method = "Nelder-Mead",
control = list(trace = 6))
fit_LL
params <- c("rho_log" = -2, "delta_log" = -2, "rho_dko_log" = -3)
asin_transf <- function(x){asin(sqrt(x))}
pred_df <- data.frame(ode(y=init_cond, times=c(0, 4, 18, 30), func=ode_func, parms=params))%>%
mutate(wt_Total = y1+y2+y3,
wt_prop_brdu = (y1+y2)/wt_Total,
dko_Total = y4+y5+y6,
dko_prop_brdu = (y4+y5)/dko_Total) %>%
filter(time != 0) %>% rename(Time_h = time)
#model optimization
LL_func <- function(param, boot_data1, boot_data2) {
rho    <- param[1]             #parametrs to be estimated as part of a vector
delta  <- param[2]
theta  <- param[3]
rho_dko <- param[4]
k <- length(param)        #number of unknown parameters
n1 <-  nrow(boot_data1)
n2 <-  nrow(boot_data2)
pred_df <- data.frame(ode(y=init_cond, times=c(0, 4, 18, 30), func=ode_func, parms=param))%>%
mutate(wt_Total = y1+y2+y3,
wt_prop_brdu = (y1+y2)/wt_Total,
dko_Total = y4+y5+y6,
dko_prop_brdu = (y4+y5)/dko_Total) %>%
filter(time != 0) %>% rename(Time_h = time)
pred_wt <- pred_df %>%
select(Time_h, contains('wt'))
pred_dko <- pred_df %>%
select(Time_h, contains('dko'))
wt_total <-  boot_data1$Total
wt_frac <-  boot_data1$prop_brdu
dko_total <-  boot_data2$Total
dko_frac <-  boot_data2$prop_brdu
R1 <- sum((asin_transf(pred_wt$wt_prop_brdu[time_index1]) - asin_transf(wt_frac))^2)
#R2 <- sum((log(pred_wt$wt_Total[time_index1]) - log(wt_total))^2)
R3 <- sum((asin_transf(pred_dko$dko_prop_brdu[time_index2]) - asin_transf(dko_frac))^2)
#R4 <- sum((log(pred_dko$dko_Total[time_index2]) - log(dko_total))^2)
logl <- -(n1/2)*(log(R1))  -(n2/2)*(log(R3))
return(-logl)
}
fit_LL <- optim(par=params, fn=LL_func,
boot_data1 = large_preB_wt, boot_data2 = large_preB_dko,
method = "Nelder-Mead",
control = list(trace = 6))
params <- c("rho_log" = -2, "delta_log" = -3, "rho_dko_log" = -3)
asin_transf <- function(x){asin(sqrt(x))}
pred_df <- data.frame(ode(y=init_cond, times=c(0, 4, 18, 30), func=ode_func, parms=params))%>%
mutate(wt_Total = y1+y2+y3,
wt_prop_brdu = (y1+y2)/wt_Total,
dko_Total = y4+y5+y6,
dko_prop_brdu = (y4+y5)/dko_Total) %>%
filter(time != 0) %>% rename(Time_h = time)
#model optimization
LL_func <- function(param, boot_data1, boot_data2) {
rho    <- param[1]             #parametrs to be estimated as part of a vector
delta  <- param[2]
theta  <- param[3]
rho_dko <- param[4]
k <- length(param)        #number of unknown parameters
n1 <-  nrow(boot_data1)
n2 <-  nrow(boot_data2)
pred_df <- data.frame(ode(y=init_cond, times=c(0, 4, 18, 30), func=ode_func, parms=param))%>%
mutate(wt_Total = y1+y2+y3,
wt_prop_brdu = (y1+y2)/wt_Total,
dko_Total = y4+y5+y6,
dko_prop_brdu = (y4+y5)/dko_Total) %>%
filter(time != 0) %>% rename(Time_h = time)
pred_wt <- pred_df %>%
select(Time_h, contains('wt'))
pred_dko <- pred_df %>%
select(Time_h, contains('dko'))
wt_total <-  boot_data1$Total
wt_frac <-  boot_data1$prop_brdu
dko_total <-  boot_data2$Total
dko_frac <-  boot_data2$prop_brdu
R1 <- sum((asin_transf(pred_wt$wt_prop_brdu[time_index1]) - asin_transf(wt_frac))^2)
#R2 <- sum((log(pred_wt$wt_Total[time_index1]) - log(wt_total))^2)
R3 <- sum((asin_transf(pred_dko$dko_prop_brdu[time_index2]) - asin_transf(dko_frac))^2)
#R4 <- sum((log(pred_dko$dko_Total[time_index2]) - log(dko_total))^2)
logl <- -(n1/2)*(log(R1))  -(n2/2)*(log(R3))
return(-logl)
}
fit_LL <- optim(par=params, fn=LL_func,
boot_data1 = large_preB_wt, boot_data2 = large_preB_dko,
method = "Nelder-Mead",
control = list(trace = 6))
fit_LL
par_est <- fit_LL$par
exp(fit_LL$par)
aiccFP
## predictions
pred_df <- data.frame(ode(y=init_cond, times=seq(0, 30, by=0.01), func=ode_func, parms=par_est))%>%
mutate(wt_Total = y1+y2+y3,
wt_prop_brdu = (y1+y2)/wt_Total,
dko_Total = y4+y5+y6,
dko_prop_brdu = (y4+y5)/dko_Total) %>% rename(Time_h = time)
pred_wt <- pred_df %>%
select(Time_h, contains('wt'))
pred_dko <- pred_df %>%
select(Time_h, contains('dko'))
ggplot()+
geom_point(data = large_preB_df, aes(x=Time_h, y=prop_brdu *100), size=2.5)+
geom_line(data = pred_wt, aes(x=Time_h, y=wt_prop_brdu*100), col=4, size=1.5)+
geom_line(data = pred_dko, aes(x=Time_h, y=dko_prop_brdu*100), col=2, size=1.5)+
geom_point(data = filter(fracs_df, subpop=="BrdU_large_pre_B"), aes(x=Time_h, y=prop_brdu, col = Genotype))+
xlim(0, 31) + ylim(0, 100)
eps_func <- function(Time){
exp(-0.2 * Time)
}
ts_pred <- seq(0, 35, by=0.1)
eps_vec <- sapply(ts_pred, eps_func)
qplot(x = ts_pred, y=eps_vec)
ode_func <- function (Time, y, parms) {
pro_pos = (131619) #counts_df %>% filter(subpop == "BrdU_Pro_B") %>%
#summarise(mean(cell_counts))
pro_neg = (378491.4) #counts_df %>% filter(subpop == "Pro_B") %>%
#summarise(mean(cell_counts)) - pro_pos
with(as.list(c(y, parms)),{
delta = exp(delta_log)
rho = exp(rho_log)
rho_dko = exp(rho_dko_log)
theta = (rho - delta) * (y1+y2+y3)/(pro_neg+pro_pos)
theta_dko = (rho_dko - delta) * (y4+y5+y6)/(pro_neg+pro_pos)
alpha = 0.95
## in WT
# L2 pop
dy1 <- theta * (1 - alpha) * pro_pos + rho * eps_func(Time) * (2*y2 + y1) - rho * (1-eps_func(Time)) * y1 - delta * y1
# L1 pop
dy2 <- theta * alpha * pro_neg + rho * eps_func(Time) * (2*y3 - y1) + 2 * rho * (1-eps_func(Time)) * y1 - delta * y2
# U pop
dy3 <- theta * pro_neg - rho * eps_func(Time) * y3 + rho * (1-eps_func(Time)) * (y2 + y3) - delta * y3
## in DKO
# L2 pop
dy4 <- theta_dko * (1 - alpha) * pro_pos + rho_dko * eps_func(Time) * (2*y5+ y4) - rho_dko * (1-eps_func(Time)) * y4 - delta * y4
# L1 pop
dy5 <- theta_dko * alpha * pro_neg + rho_dko * eps_func(Time) * (2*y6 - y4) + 2 * rho_dko * (1-eps_func(Time)) * y4 - delta * y5
# U pop
dy6 <- theta_dko * pro_neg - rho_dko * eps_func(Time) * y6 + rho_dko * (1-eps_func(Time)) * (y5 + y6) - delta * y6
list(c(dy1, dy2, dy3, dy4, dy5, dy6))
})
}
init_cond <- c("y1" = 0.0, "y2" = 0, "y3" = 372151, "y4" = 0.0, "y5" = 0, "y6" = 83027)
params <- c("rho_log" = -2, "delta_log" = -3, "rho_dko_log" = -3)
asin_transf <- function(x){asin(sqrt(x))}
pred_df <- data.frame(ode(y=init_cond, times=c(0, 4, 18, 30), func=ode_func, parms=params))%>%
mutate(wt_Total = y1+y2+y3,
wt_prop_brdu = (y1+y2)/wt_Total,
dko_Total = y4+y5+y6,
dko_prop_brdu = (y4+y5)/dko_Total) %>%
filter(time != 0) %>% rename(Time_h = time)
#model optimization
LL_func <- function(param, boot_data1, boot_data2) {
rho    <- param[1]             #parametrs to be estimated as part of a vector
delta  <- param[2]
theta  <- param[3]
rho_dko <- param[4]
k <- length(param)        #number of unknown parameters
n1 <-  nrow(boot_data1)
n2 <-  nrow(boot_data2)
pred_df <- data.frame(ode(y=init_cond, times=c(0, 4, 18, 30), func=ode_func, parms=param))%>%
mutate(wt_Total = y1+y2+y3,
wt_prop_brdu = (y1+y2)/wt_Total,
dko_Total = y4+y5+y6,
dko_prop_brdu = (y4+y5)/dko_Total) %>%
filter(time != 0) %>% rename(Time_h = time)
pred_wt <- pred_df %>%
select(Time_h, contains('wt'))
pred_dko <- pred_df %>%
select(Time_h, contains('dko'))
wt_total <-  boot_data1$Total
wt_frac <-  boot_data1$prop_brdu
dko_total <-  boot_data2$Total
dko_frac <-  boot_data2$prop_brdu
R1 <- sum((asin_transf(pred_wt$wt_prop_brdu[time_index1]) - asin_transf(wt_frac))^2)
#R2 <- sum((log(pred_wt$wt_Total[time_index1]) - log(wt_total))^2)
R3 <- sum((asin_transf(pred_dko$dko_prop_brdu[time_index2]) - asin_transf(dko_frac))^2)
#R4 <- sum((log(pred_dko$dko_Total[time_index2]) - log(dko_total))^2)
logl <- -(n1/2)*(log(R1))  -(n2/2)*(log(R3))
return(-logl)
}
fit_LL <- optim(par=params, fn=LL_func,
boot_data1 = large_preB_wt, boot_data2 = large_preB_dko,
method = "Nelder-Mead",
control = list(trace = 6))
fit_LL
par_est <- fit_LL$par
exp(fit_LL$par)
aiccFP
## predictions
pred_df <- data.frame(ode(y=init_cond, times=seq(0, 30, by=0.01), func=ode_func, parms=par_est))%>%
mutate(wt_Total = y1+y2+y3,
wt_prop_brdu = (y1+y2)/wt_Total,
dko_Total = y4+y5+y6,
dko_prop_brdu = (y4+y5)/dko_Total) %>% rename(Time_h = time)
pred_wt <- pred_df %>%
select(Time_h, contains('wt'))
pred_dko <- pred_df %>%
select(Time_h, contains('dko'))
ggplot()+
geom_point(data = large_preB_df, aes(x=Time_h, y=prop_brdu *100), size=2.5)+
geom_line(data = pred_wt, aes(x=Time_h, y=wt_prop_brdu*100), col=4, size=1.5)+
geom_line(data = pred_dko, aes(x=Time_h, y=dko_prop_brdu*100), col=2, size=1.5)+
geom_point(data = filter(fracs_df, subpop=="BrdU_large_pre_B"), aes(x=Time_h, y=prop_brdu, col = Genotype))+
xlim(0, 31) + ylim(0, 100)
log(2)/0.37
log(2)/1.12
View(pred_df)
## predictions
pred_df <- data.frame(ode(y=init_cond, times=seq(0, 30, by=0.01), func=ode_func, parms=par_est))%>%
mutate(wt_Total = y1+y2+y3,
wt_prop_brdu = (y1+y2)/wt_Total,
dko_Total = y4+y5+y6,
dko_prop_brdu = (y4+y5)/dko_Total) %>% rename(Time_h = time) %>%
select(Time_h, contains('prop'))
## predictions
pred_df <- data.frame(ode(y=init_cond, times=seq(0, 30, by=0.01), func=ode_func, parms=par_est))%>%
mutate(wt_Total = y1+y2+y3,
wt_prop_brdu = (y1+y2)/wt_Total,
dko_Total = y4+y5+y6,
dko_prop_brdu = (y4+y5)/dko_Total) %>% rename(Time_h = time) %>%
select(Time_h, contains('prop')) %>%
gather(-Time_h, key = "Genotype", value = "prop_BrdU")
View(large_preB_df)
ggplot()+
geom_point(data = large_preB_df, aes(x=Time_h, y=prop_brdu *100), size=2.5)+
geom_line(data = pred_df, aes(x=Time_h, y=wt_prop_brdu*100), col=4, size=1.5)+
xlim(0, 31) + ylim(0, 100)
ggplot()+
geom_point(data = large_preB_df, aes(x=Time_h, y=prop_brdu *100), size=2.5)+
geom_line(data = pred_df, aes(x=Time_h, y=prop_brdu*100), col=4, size=1.5)+
xlim(0, 31) + ylim(0, 100)
## predictions
pred_df <- data.frame(ode(y=init_cond, times=seq(0, 30, by=0.01), func=ode_func, parms=par_est))%>%
mutate(wt_Total = y1+y2+y3,
wt_prop_brdu = (y1+y2)/wt_Total,
dko_Total = y4+y5+y6,
dko_prop_brdu = (y4+y5)/dko_Total) %>% rename(Time_h = time) %>%
select(Time_h, contains('prop')) %>%
gather(-Time_h, key = "Genotype", value = "prop_brdu")
pred_wt <- pred_df %>%
select(Time_h, contains('wt'))
pred_dko <- pred_df %>%
select(Time_h, contains('dko'))
ggplot()+
geom_point(data = large_preB_df, aes(x=Time_h, y=prop_brdu *100), size=2.5)+
geom_line(data = pred_df, aes(x=Time_h, y=prop_brdu*100), col=4, size=1.5)+
xlim(0, 31) + ylim(0, 100)
ggplot()+
geom_point(data = large_preB_df, aes(x=Time_h, y=prop_brdu *100), size=2.5)+
geom_line(data = pred_df, aes(x=Time_h, y=prop_brdu*100, col=Genotype), size=1.5)+
xlim(0, 31) + ylim(0, 100)
ggplot()+
geom_point(data = large_preB_df, aes(x=Time_h, y=prop_brdu *100, col=Genotype), size=2.5)+
geom_line(data = pred_df, aes(x=Time_h, y=prop_brdu*100, col=Genotype), size=1.5)+
xlim(0, 31) + ylim(0, 100)
## predictions
pred_df <- data.frame(ode(y=init_cond, times=seq(0, 30, by=0.01), func=ode_func, parms=par_est))%>%
mutate(wt_Total = y1+y2+y3,
wt_prop_brdu = (y1+y2)/wt_Total,
dko_Total = y4+y5+y6,
dko_prop_brdu = (y4+y5)/dko_Total) %>% rename(Time_h = time) %>%
select(Time_h, contains('prop')) %>%
gather(-Time_h, key = "genotype", value = "prop_brdu") %>%
mutate(Genotype = ifelse(grepl(genotype, "wt"), "WT", "dKO"))
grepl(pred_df$genotype, "wt")
pred_df$genotype
## predictions
pred_df <- data.frame(ode(y=init_cond, times=seq(0, 30, by=0.01), func=ode_func, parms=par_est))%>%
mutate(wt_Total = y1+y2+y3,
wt_prop_brdu = (y1+y2)/wt_Total,
dko_Total = y4+y5+y6,
dko_prop_brdu = (y4+y5)/dko_Total) %>% rename(Time_h = time) %>%
select(Time_h, contains('prop')) %>%
gather(-Time_h, key = "genotype", value = "prop_brdu") %>%
mutate(Genotype = ifelse(grepl("wt", genotype), "WT", "dKO"))
ggplot()+
geom_point(data = large_preB_df, aes(x=Time_h, y=prop_brdu *100, col=Genotype), size=2.5)+
geom_line(data = pred_df, aes(x=Time_h, y=prop_brdu*100, col=Genotype), size=1.5)+
xlim(0, 31) + ylim(0, 100)
ggplot()+
geom_point(data = large_preB_df, aes(x=Time_h, y=prop_brdu *100, col=Genotype), size=2.5)+
geom_line(data = pred_df, aes(x=Time_h, y=prop_brdu*100, col=Genotype), size=1.5)+
facet_wrap(.~ Genotype)+
xlim(0, 31) + ylim(0, 100)
ggplot()+
geom_point(data = large_preB_df, aes(x=Time_h, y=prop_brdu *100, col=Genotype))+
geom_line(data = pred_df, aes(x=Time_h, y=prop_brdu*100, col=Genotype))+
facet_wrap(.~ Genotype)+
xlim(0, 31) + ylim(0, 100)
eps_func <- function(Time){
exp(-0.4 * Time)
}
ts_pred <- seq(0, 35, by=0.1)
eps_vec <- sapply(ts_pred, eps_func)
qplot(x = ts_pred, y=eps_vec)
ode_func <- function (Time, y, parms) {
pro_pos = (131619) #counts_df %>% filter(subpop == "BrdU_Pro_B") %>%
#summarise(mean(cell_counts))
pro_neg = (378491.4) #counts_df %>% filter(subpop == "Pro_B") %>%
#summarise(mean(cell_counts)) - pro_pos
with(as.list(c(y, parms)),{
delta = exp(delta_log)
rho = exp(rho_log)
rho_dko = exp(rho_dko_log)
theta = (rho - delta) * (y1+y2+y3)/(pro_neg+pro_pos)
theta_dko = (rho_dko - delta) * (y4+y5+y6)/(pro_neg+pro_pos)
alpha = 0.95
## in WT
# L2 pop
dy1 <- theta * (1 - alpha) * pro_pos + rho * eps_func(Time) * (2*y2 + y1) - rho * (1-eps_func(Time)) * y1 - delta * y1
# L1 pop
dy2 <- theta * alpha * pro_neg + rho * eps_func(Time) * (2*y3 - y1) + 2 * rho * (1-eps_func(Time)) * y1 - delta * y2
# U pop
dy3 <- theta * pro_neg - rho * eps_func(Time) * y3 + rho * (1-eps_func(Time)) * (y2 + y3) - delta * y3
## in DKO
# L2 pop
dy4 <- theta_dko * (1 - alpha) * pro_pos + rho_dko * eps_func(Time) * (2*y5+ y4) - rho_dko * (1-eps_func(Time)) * y4 - delta * y4
# L1 pop
dy5 <- theta_dko * alpha * pro_neg + rho_dko * eps_func(Time) * (2*y6 - y4) + 2 * rho_dko * (1-eps_func(Time)) * y4 - delta * y5
# U pop
dy6 <- theta_dko * pro_neg - rho_dko * eps_func(Time) * y6 + rho_dko * (1-eps_func(Time)) * (y5 + y6) - delta * y6
list(c(dy1, dy2, dy3, dy4, dy5, dy6))
})
}
init_cond <- c("y1" = 0.0, "y2" = 0, "y3" = 372151, "y4" = 0.0, "y5" = 0, "y6" = 83027)
params <- c("rho_log" = -2, "delta_log" = -3, "rho_dko_log" = -3)
asin_transf <- function(x){asin(sqrt(x))}
pred_df <- data.frame(ode(y=init_cond, times=c(0, 4, 18, 30), func=ode_func, parms=params))%>%
mutate(wt_Total = y1+y2+y3,
wt_prop_brdu = (y1+y2)/wt_Total,
dko_Total = y4+y5+y6,
dko_prop_brdu = (y4+y5)/dko_Total) %>%
filter(time != 0) %>% rename(Time_h = time)
#model optimization
LL_func <- function(param, boot_data1, boot_data2) {
rho    <- param[1]             #parametrs to be estimated as part of a vector
delta  <- param[2]
theta  <- param[3]
rho_dko <- param[4]
k <- length(param)        #number of unknown parameters
n1 <-  nrow(boot_data1)
n2 <-  nrow(boot_data2)
pred_df <- data.frame(ode(y=init_cond, times=c(0, 4, 18, 30), func=ode_func, parms=param))%>%
mutate(wt_Total = y1+y2+y3,
wt_prop_brdu = (y1+y2)/wt_Total,
dko_Total = y4+y5+y6,
dko_prop_brdu = (y4+y5)/dko_Total) %>%
filter(time != 0) %>% rename(Time_h = time)
pred_wt <- pred_df %>%
select(Time_h, contains('wt'))
pred_dko <- pred_df %>%
select(Time_h, contains('dko'))
wt_total <-  boot_data1$Total
wt_frac <-  boot_data1$prop_brdu
dko_total <-  boot_data2$Total
dko_frac <-  boot_data2$prop_brdu
R1 <- sum((asin_transf(pred_wt$wt_prop_brdu[time_index1]) - asin_transf(wt_frac))^2)
#R2 <- sum((log(pred_wt$wt_Total[time_index1]) - log(wt_total))^2)
R3 <- sum((asin_transf(pred_dko$dko_prop_brdu[time_index2]) - asin_transf(dko_frac))^2)
#R4 <- sum((log(pred_dko$dko_Total[time_index2]) - log(dko_total))^2)
logl <- -(n1/2)*(log(R1))  -(n2/2)*(log(R3))
return(-logl)
}
fit_LL <- optim(par=params, fn=LL_func,
boot_data1 = large_preB_wt, boot_data2 = large_preB_dko,
method = "Nelder-Mead",
control = list(trace = 6))
fit_LL
par_est <- fit_LL$par
exp(fit_LL$par)
aiccFP
## predictions
pred_df <- data.frame(ode(y=init_cond, times=seq(0, 30, by=0.01), func=ode_func, parms=par_est))%>%
mutate(wt_Total = y1+y2+y3,
wt_prop_brdu = (y1+y2)/wt_Total,
dko_Total = y4+y5+y6,
dko_prop_brdu = (y4+y5)/dko_Total) %>% rename(Time_h = time) %>%
select(Time_h, contains('prop')) %>%
gather(-Time_h, key = "genotype", value = "prop_brdu") %>%
mutate(Genotype = ifelse(grepl("wt", genotype), "WT", "dKO"))
ggplot()+
geom_point(data = large_preB_df, aes(x=Time_h, y=prop_brdu *100, col=Genotype))+
geom_line(data = pred_df, aes(x=Time_h, y=prop_brdu*100, col=Genotype))+
facet_wrap(.~ Genotype)+
xlim(0, 31) + ylim(0, 100)
eps_func <- function(Time){
exp(-0.1 * Time)
}
ts_pred <- seq(0, 35, by=0.1)
eps_vec <- sapply(ts_pred, eps_func)
qplot(x = ts_pred, y=eps_vec)
ode_func <- function (Time, y, parms) {
pro_pos = (131619) #counts_df %>% filter(subpop == "BrdU_Pro_B") %>%
#summarise(mean(cell_counts))
pro_neg = (378491.4) #counts_df %>% filter(subpop == "Pro_B") %>%
#summarise(mean(cell_counts)) - pro_pos
with(as.list(c(y, parms)),{
delta = exp(delta_log)
rho = exp(rho_log)
rho_dko = exp(rho_dko_log)
theta = (rho - delta) * (y1+y2+y3)/(pro_neg+pro_pos)
theta_dko = (rho_dko - delta) * (y4+y5+y6)/(pro_neg+pro_pos)
alpha = 0.95
## in WT
# L2 pop
dy1 <- theta * (1 - alpha) * pro_pos + rho * eps_func(Time) * (2*y2 + y1) - rho * (1-eps_func(Time)) * y1 - delta * y1
# L1 pop
dy2 <- theta * alpha * pro_neg + rho * eps_func(Time) * (2*y3 - y1) + 2 * rho * (1-eps_func(Time)) * y1 - delta * y2
# U pop
dy3 <- theta * pro_neg - rho * eps_func(Time) * y3 + rho * (1-eps_func(Time)) * (y2 + y3) - delta * y3
## in DKO
# L2 pop
dy4 <- theta_dko * (1 - alpha) * pro_pos + rho_dko * eps_func(Time) * (2*y5+ y4) - rho_dko * (1-eps_func(Time)) * y4 - delta * y4
# L1 pop
dy5 <- theta_dko * alpha * pro_neg + rho_dko * eps_func(Time) * (2*y6 - y4) + 2 * rho_dko * (1-eps_func(Time)) * y4 - delta * y5
# U pop
dy6 <- theta_dko * pro_neg - rho_dko * eps_func(Time) * y6 + rho_dko * (1-eps_func(Time)) * (y5 + y6) - delta * y6
list(c(dy1, dy2, dy3, dy4, dy5, dy6))
})
}
init_cond <- c("y1" = 0.0, "y2" = 0, "y3" = 372151, "y4" = 0.0, "y5" = 0, "y6" = 83027)
params <- c("rho_log" = -2, "delta_log" = -3, "rho_dko_log" = -3)
asin_transf <- function(x){asin(sqrt(x))}
pred_df <- data.frame(ode(y=init_cond, times=c(0, 4, 18, 30), func=ode_func, parms=params))%>%
mutate(wt_Total = y1+y2+y3,
wt_prop_brdu = (y1+y2)/wt_Total,
dko_Total = y4+y5+y6,
dko_prop_brdu = (y4+y5)/dko_Total) %>%
filter(time != 0) %>% rename(Time_h = time)
#model optimization
LL_func <- function(param, boot_data1, boot_data2) {
rho    <- param[1]             #parametrs to be estimated as part of a vector
delta  <- param[2]
theta  <- param[3]
rho_dko <- param[4]
k <- length(param)        #number of unknown parameters
n1 <-  nrow(boot_data1)
n2 <-  nrow(boot_data2)
pred_df <- data.frame(ode(y=init_cond, times=c(0, 4, 18, 30), func=ode_func, parms=param))%>%
mutate(wt_Total = y1+y2+y3,
wt_prop_brdu = (y1+y2)/wt_Total,
dko_Total = y4+y5+y6,
dko_prop_brdu = (y4+y5)/dko_Total) %>%
filter(time != 0) %>% rename(Time_h = time)
pred_wt <- pred_df %>%
select(Time_h, contains('wt'))
pred_dko <- pred_df %>%
select(Time_h, contains('dko'))
wt_total <-  boot_data1$Total
wt_frac <-  boot_data1$prop_brdu
dko_total <-  boot_data2$Total
dko_frac <-  boot_data2$prop_brdu
R1 <- sum((asin_transf(pred_wt$wt_prop_brdu[time_index1]) - asin_transf(wt_frac))^2)
#R2 <- sum((log(pred_wt$wt_Total[time_index1]) - log(wt_total))^2)
R3 <- sum((asin_transf(pred_dko$dko_prop_brdu[time_index2]) - asin_transf(dko_frac))^2)
#R4 <- sum((log(pred_dko$dko_Total[time_index2]) - log(dko_total))^2)
logl <- -(n1/2)*(log(R1))  -(n2/2)*(log(R3))
return(-logl)
}
fit_LL <- optim(par=params, fn=LL_func,
boot_data1 = large_preB_wt, boot_data2 = large_preB_dko,
method = "Nelder-Mead",
control = list(trace = 6))
fit_LL
par_est <- fit_LL$par
exp(fit_LL$par)
## predictions
pred_df <- data.frame(ode(y=init_cond, times=seq(0, 30, by=0.01), func=ode_func, parms=par_est))%>%
mutate(wt_Total = y1+y2+y3,
wt_prop_brdu = (y1+y2)/wt_Total,
dko_Total = y4+y5+y6,
dko_prop_brdu = (y4+y5)/dko_Total) %>% rename(Time_h = time) %>%
select(Time_h, contains('prop')) %>%
gather(-Time_h, key = "genotype", value = "prop_brdu") %>%
mutate(Genotype = ifelse(grepl("wt", genotype), "WT", "dKO"))
ggplot()+
geom_point(data = large_preB_df, aes(x=Time_h, y=prop_brdu *100, col=Genotype))+
geom_line(data = pred_df, aes(x=Time_h, y=prop_brdu*100, col=Genotype))+
facet_wrap(.~ Genotype)+
xlim(0, 31) + ylim(0, 100)
par_est <- fit_LL$par
exp(fit_LL$par)
